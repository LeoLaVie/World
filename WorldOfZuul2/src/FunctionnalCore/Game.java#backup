import java.awt.*;
import javax.swing.*;
import java.awt.event.*;


/**
 * Write a description of class Game here.
 *
 * @author (your name)
 * @version (a version number or a date)
 */
public class Game extends JFrame
{
    // instance variables - replace the example below with your own
    private Room currentRoom, outside1, houseluttin1, houseluttin2, outside2, houseluttin3, houseluttin4, outside3, houseluttin5, houseluttin6, outside4, castlePapa;
    private Room mineCastle, roofCastle, entreCastle, roomCastle1, roomCastle2, roomCastle3, roomCastle4, roomCastle5, roomCastle6, roomMama, roomCastle8, roomCastle9, roomCastle10,  roomCastle7, floor2, floor3, floor4, roomBoos;
    private Parser parser;

        /**
     * Attributes menubar
     * @param menuBar is the JMenuBar for the menu
     * @param quit is the JMenuItem to quit the game
     * @param help is the JMenuItem to have a help
     */

    private JMenuBar menuBar;
    private JMenuItem quit = new JMenuItem("Quit");
    private JMenuItem help = new JMenuItem("Help");
    
    /**
     * Attributes panel
     * @param myPanel is the JPanel for creat different panel.
     */
    
    private JPanel myPanel;
    
    /**
     * Attributes button
     * @param buttonNorth
     * @param buttonEast
     * @param buttonSouth
     * @param buttonWest
     * @param buttonUp
     * @param buttonDown
     */
    private JButton buttonNorth;
    private JButton buttonEast;
    private JButton buttonSouth;
    private JButton buttonWest;
    private JButton button;
    private JButton buttonUp;
    private JButton buttonDown;
    
    /**
     * Attributes label
     * @param 
     */
     private JLabel labelPv;
     private JLabel labelVide;
     private JLabel labelVide2;
     private JLabel labelVide3;
     private JLabel labelVide4;
     private JLabel labelVide5;
     
     
     //other attribut
    FlowLayout experimentLayout = new FlowLayout();
    
    
    /**
     * Constructor for objects of class Game
     */
    public Game()
    {
        // initialise instance variables
        createRooms();
        parser = new Parser();
        
        //creation of menu bar
        menuBar = new JMenuBar();
        menuBar.add(help);
        menuBar.add(quit);
        
        Icon iconNorth = new ImageIcon("flecheNorth.gif");
        Icon iconEast = new ImageIcon("flecheEast.gif");
        Icon iconSouth = new ImageIcon("flecheSouth.gif");
        Icon iconWest = new ImageIcon("flecheWest.gif");
        Icon iconUp = new ImageIcon("flecheUp.gif");
        Icon iconDown = new ImageIcon("flecheDown.gif");
        
        //creation of buttons and label
        buttonNorth = new JButton(iconNorth);
        buttonNorth.setOpaque(false);
        buttonNorth.setContentAreaFilled(false);
        buttonNorth.setBorderPainted(false);
        
        buttonEast = new JButton(iconEast);
        buttonEast.setOpaque(false);
        buttonEast.setContentAreaFilled(false);
        buttonEast.setBorderPainted(false);
        
        buttonSouth = new JButton(iconSouth);
        buttonSouth.setOpaque(false);
        buttonSouth.setContentAreaFilled(false);
        buttonSouth.setBorderPainted(false);
        
        buttonWest = new JButton(iconWest);
        buttonWest.setOpaque(false);
        buttonWest.setContentAreaFilled(false);
        buttonWest.setBorderPainted(false);
       
        buttonUp = new JButton(iconUp);
        buttonUp.setOpaque(false);
        buttonUp.setContentAreaFilled(false);
        buttonUp.setBorderPainted(false);
        
        buttonDown = new JButton(iconDown);
        buttonDown.setPreferredSize(new Dimension(80, 30)); 
        buttonDown.setOpaque(false);
        buttonDown.setContentAreaFilled(false);
        buttonDown.setBorderPainted(false);

        
        //label pv
        labelPv = new JLabel("PV" + "0");
        labelVide = new JLabel("");
        labelVide2 = new JLabel("");
        labelVide3 = new JLabel("");
        labelVide4 = new JLabel("");
        labelVide5 = new JLabel("");
        
        //add to panel up/down
        JPanel panelUpDown = new JPanel();
        panelUpDown.setLayout(new GridLayout(1,2));
        panelUpDown.add(buttonUp);
        panelUpDown.add(buttonDown);
        
        //add to panel move
        JPanel panelMove = new JPanel();

        panelMove.setLayout(new GridLayout(3,3));
        panelMove.setPreferredSize(new Dimension(200, 200)); 
        
        panelMove.add(labelVide);
        panelMove.add(buttonNorth);
        panelMove.add(labelVide2);
        
        panelMove.add(buttonWest);
        panelMove.add(labelVide3);
        panelMove.add(buttonEast);
       
        panelMove.add(labelVide4);
        panelMove.add(buttonSouth);
        panelMove.add(labelVide5);
        
        panelMove.add(labelVide);
        panelMove.add(panelUpDown);
        
        //panel interface
        JPanel panelInterface = new JPanel();
        panelInterface.add(panelMove);
        panelInterface.add(labelPv);
        
        //panel total
        JPanel panelTot = new JPanel();
        panelTot.add(panelMove, BorderLayout.SOUTH);
        
    
       // help 
       help.addActionListener(new ActionListener(){
        public void actionPerformed (ActionEvent e)
        {
          // help page
          System.out.println("You are lost. You are alone. You wander");
          System.out.println("around at the Santa Claus's village.");
          System.out.println();
          System.out.println("Your command words are:");
          System.out.println("   go quit help");
        }     
       });
    
       // quit the game
       quit.addActionListener(new ActionListener(){
        public void actionPerformed (ActionEvent e)
        {
          // exit page
          System.exit(0);
        }       
       });
        
        
        
      //  this.setSize(3, 3);
        this.setTitle("Jeux");
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLayout(new GridLayout(1,1));
        this.setJMenuBar(menuBar);
        this.add(panelTot);
        this.pack();
        this.setVisible(true);
        
        
    }

    /**
     * An example of a method - replace this comment with your own
     *
     * @param  y  a sample parameter for a method
     * @return    the sum of x and y
     */
    public void createRooms()
    {
        // put your code here
        //Room outside1, houseluttin1, houseluttin2, outside2, houseluttin3, houseluttin4, outside3, houseluttin5, houseluttin6, outside4, castlePapa;
        
        //create the rooms
        outside1 = new Room("outside the main entrance of the Santa claus village");
        houseluttin1 = new Room("in a luttin's house");
        houseluttin2 = new Room("in a luttin's house");
        outside2 = new Room("outside of the Santa claus village");
        houseluttin3 = new Room("in a luttin's house");
        houseluttin4 = new Room("in a luttin's house");
        outside3 = new Room("outside of the Santa claus village");
        houseluttin5 = new Room("in a luttin's house");
        houseluttin6 = new Room("in a luttin's house");
        outside4 = new Room("outside of the Santa claus village");
        castlePapa = new Room ("in the Santa claus castle");
        mineCastle = new Room("in the mine of the Santa claus castle");
        entreCastle = new Room("in the entrance of the Santa claus castle");
        roomCastle1 = new Room ("in the Santa claus castle room");
        roomCastle2 = new Room ("in the Santa claus castle room");
        roomCastle3 = new Room ("in the Santa claus castle room");
        roomCastle4 = new Room ("in the Santa claus castle room");
        floor2 = new Room("in the Santa claus castle floor 2");
        roomCastle4 = new Room ("in the Santa claus castle room");
        roomCastle5 = new Room ("in the Santa claus castle room");
        roofCastle = new Room("in the roof of the Santa claus castle");
        roomCastle6 = new Room ("in the Santa claus castle room");
        roomMama = new Room ("in the Santa claus castle room");
        floor3 = new Room("in the Santa claus castle floor 3");
        roomCastle8 = new Room ("in the Santa claus castle room");
        roomCastle9 = new Room ("in the Santa claus castle room");
        roomCastle10 = new Room ("in the Santa claus castle room");
        roomCastle7 = new Room ("in the Santa claus castle room");
        floor4 = new Room("in the Santa claus castle floor 4");
        roomBoos = new Room("in the Santa claus castle boss room");
        

        //initialise room exits
        outside1.setExits(outside2, houseluttin1, null, houseluttin2, null,null);
        houseluttin1.setExits(null, null, null, outside1, null,null);
        houseluttin2.setExits(null, outside1, null, null, null,null);
        outside2.setExits(outside3, houseluttin3, outside1, houseluttin4, null,null);
        houseluttin3.setExits(null, null, null, outside2, null,null);
        houseluttin4.setExits(null, outside2, null, null, null,null);
        outside3.setExits(outside4, houseluttin5, outside2, houseluttin6, null,null);
        houseluttin5.setExits(null, null, null, outside3, null,null);
        houseluttin6.setExits(null, outside3, null, null, null,null);
        outside4.setExits(entreCastle, null, outside3, null, null, null);
        
        entreCastle.setExits(roomCastle1, roomCastle2, roomCastle3, roomCastle3, floor2, mineCastle);
        mineCastle.setExits(null, null, null, null, entreCastle, null);
        
        roomCastle1.setExits(null, null, entreCastle, null, null, null);
        roomCastle2.setExits(null, null, null, entreCastle, null, null);
        roomCastle3.setExits(entreCastle, null, null, null, null, null);
        roomCastle4.setExits(null, entreCastle, null, null, null, null);
        
        floor2.setExits(roomCastle4, roomCastle5, roomCastle6, roomCastle7, floor3, entreCastle);
        roomCastle4.setExits(null, null, floor2, null, null, null);
        roomCastle5.setExits(null, roofCastle, null, floor2, null, null);
        roofCastle.setExits(null, null, null, roomCastle5, null, null);
        roomCastle6.setExits(floor2, null, null, null, null, null);
        roomCastle7.setExits(null, floor3, null, null, null, null);
        
        floor3.setExits(roomCastle8, roomCastle9, roomCastle10, roomMama, floor4, floor2);
        roomCastle8.setExits(null, null, floor3, null, null, null);
        roomCastle9.setExits(null, roofCastle, null, floor3, null, null);
        roomCastle10.setExits(floor3, null, null, null, null, null);
        roomMama.setExits(null, floor3, null, null, null, null);
        
        floor4.setExits(roomBoos, null, null, null, null, floor4);
        roomBoos.setExits(null, null, null, null, null, null);

        //start game outside of the start of the Santa village
        currentRoom = outside1;
        
        
    }
    
        /**
     *  Main play routine.  Loops until end of play.
     */
    public void play() 
    {            
        printWelcome();

        // Enter the main command loop.  Here we repeatedly read commands and
        // execute them until the game is over.
                
        boolean finished = false;
        while (! finished) {
            Command command = parser.getCommand();
            finished = processCommand(command);
        }
        System.out.println("Thank you for playing.  Good bye.");
    }
    
    /**
     * Print out the opening message for the player.
     */
    private void printWelcome()
    {
        System.out.println();
        System.out.println("Welcome to the World of Zuul!");
        System.out.println("World of Zuul is a new, incredibly boring adventure game.");
        System.out.println("Type 'help' if you need help.");
        System.out.println();
        System.out.println("You are " + currentRoom.getDescription());
        System.out.print("Exits: ");
        
        // Look for all directions
       for (String key : currentRoom.getExit().keySet())
        {
            if(currentRoom.getExit().get(key) != null)
            {
            System.out.print(key);
            }    
        System.out.println();
       }
    }
    
    /**
     * Given a command, process (that is: execute) the command.
     * @param command The command to be processed.
     * @return true If the command ends the game, false otherwise.
     */
    private boolean processCommand(Command command) 
    {
        boolean wantToQuit = false;

        if(command.isUnknown()) {
            System.out.println("I don't know what you mean...");
            return false;
        }

        String commandWord = command.getCommandWord();
        if (commandWord.equals("help"))
            printHelp();
        else if (commandWord.equals("go"))
            goRoom(command);
        else if (commandWord.equals("quit"))
            wantToQuit = quit(command);

        return wantToQuit;
    }
    
    /**
     * Print out some help information.
     * Here we print some stupid, cryptic message and a list of the 
     * command words.
     */
    private void printHelp() 
    {
        System.out.println("You are lost. You are alone. You wander");
        System.out.println("around at the Santa Claus's village.");
        System.out.println();
        System.out.println("Your command words are:");
        System.out.println("   go quit help");
    }
    
    
    /** 
     * Try to go to one direction. If there is an exit, enter
     * the new room, otherwise print an error message.
     */
    private void goRoom(Command command) 
    {
        if(!command.hasSecondWord()) {
            // if there is no second word, we don't know where to go...
            System.out.println("Go where?");
            return;
        }

        String direction = command.getSecondWord();

        // Try to leave current room.
        Room nextRoom = null;
        nextRoom = currentRoom.getExit().get(direction);

       if (nextRoom == null) {
            System.out.println("There is no door!");
       }
       else {
            currentRoom = nextRoom;
            System.out.println("You are " + currentRoom.getDescription());
            System.out.print("Exits: ");
            
            for (String key : currentRoom.getExit().keySet())
            {
               if (currentRoom.getExit().get(key)!=null)
                {
                   System.out.println(key);
                }
            System.out.println();
             }
       }
    }
    
        /** 
     * "Quit" was entered. Check the rest of the command to see
     * whether we really quit the game.
     * @return true, if this command quits the game, false otherwise.
     */
    private boolean quit(Command command) 
    {
        if(command.hasSecondWord()) {
            System.out.println("Quit what?");
            return false;
        }
        else {
            return true;  // signal that we want to quit
        }
    }
    
}
